#include "NES_Palette.h"

using byte = unsigned char;

constexpr klib::NES_Color::NES_Color(byte p_r, byte p_g, byte p_b) :
	m_r{ p_r }, m_g{ p_g }, m_b{ p_b }
{}

klib::NES_Palette::NES_Palette(const std::vector<byte>& p_palette) {
	if (p_palette.size() == 3)
		m_colors.push_back(0x0f);
	m_colors.insert(end(m_colors), begin(p_palette), end(p_palette));
}

std::vector<klib::NES_Color> klib::NES_Palette::ms_nes_colors{
	{ 0x7C, 0x7C, 0x7C}, {0x00, 0x00, 0xFC}, {0x00, 0x00, 0xBC}, {0x44, 0x28, 0xBC}, {0x94, 0x00, 0x84}, {0xA8, 0x00, 0x20}, {0xA8, 0x10, 0x00}, {0x88, 0x14, 0x00}, {0x50, 0x30, 0x00}, {0x00, 0x78, 0x00}, {0x00, 0x68, 0x00}, {0x00, 0x58, 0x00}, {0x00, 0x40, 0x58}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0xBC, 0xBC, 0xBC}, {0x00, 0x78, 0xF8}, {0x00, 0x58, 0xF8}, {0x68, 0x44, 0xFC}, {0xD8, 0x00, 0xCC}, {0xE4, 0x00, 0x58}, {0xF8, 0x38, 0x00}, {0xE4, 0x5C, 0x10}, {0xAC, 0x7C, 0x00}, {0x00, 0xB8, 0x00}, {0x00, 0xA8, 0x00}, {0x00, 0xA8, 0x44}, {0x00, 0x88, 0x88}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0xF8, 0xF8, 0xF8}, {0x3C, 0xBC, 0xFC}, {0x68, 0x88, 0xFC}, {0x98, 0x78, 0xF8}, {0xF8, 0x78, 0xF8}, {0xF8, 0x58, 0x98}, {0xF8, 0x78, 0x58}, {0xFC, 0xA0, 0x44}, {0xF8, 0xB8, 0x00}, {0xB8, 0xF8, 0x18}, {0x58, 0xD8, 0x54}, {0x58, 0xF8, 0x98}, {0x00, 0xE8, 0xD8}, {0x78, 0x78, 0x78}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0xFC, 0xFC, 0xFC}, {0xA4, 0xE4, 0xFC}, {0xB8, 0xB8, 0xF8}, {0xD8, 0xB8, 0xF8}, {0xF8, 0xB8, 0xF8}, {0xF8, 0xA4, 0xC0}, {0xF0, 0xD0, 0xB0}, {0xFC, 0xE0, 0xA8}, {0xF8, 0xD8, 0x78}, {0xD8, 0xF8, 0x78}, {0xB8, 0xF8, 0xB8}, {0xB8, 0xF8, 0xD8}, {0x00, 0xFC, 0xFC}, {0xF8, 0xD8, 0xF8}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00},
	// tack on a hot-pink which we will use when a uniform transparency indicating color is needed
	{0xff, 0x69, 0xb4}
};

byte klib::NES_Palette::get_nes_palette_index(std::size_t p_color_no) const {
	return m_colors.at(p_color_no);
}

klib::NES_Color klib::NES_Palette::get_rgb_color(std::size_t p_color_no) const {
	return ms_nes_colors.at(get_nes_palette_index(p_color_no));
}

klib::NES_Color klib::NES_Palette::get_nes_color(std::size_t p_color_no) {
	return ms_nes_colors.at(p_color_no);
}

std::size_t klib::NES_Palette::get_nes_color_count(void) {
	return ms_nes_colors.size();
}

klib::NES_Color klib::NES_Palette::get_transparent_color(void) {
	return ms_nes_colors.back();
}

byte klib::NES_Palette::get_transparent_index(void) {
	return static_cast<byte>(ms_nes_colors.size() - 1);
}
